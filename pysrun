#!/usr/bin/env python
"""A Python implementation of the SRUN 3000 internet tolling client.

Usage: pysrun {login|logout|kick}

Before starting the program, a configuration file must be saved at the
path "~/.pysrun.cfg".  As of now, the path to config file is hard-coded.
This is expected to be fixed in the future.

The configuration file is used to store login credentials and run-time
options.  An example config file is provided with the default settings.

This program is licensed under the BSD license.  You are free to use it
or modify it provided the conditions in the license are met. See the file
COPYRIGHT.


"""
import sys
import os.path
import re
import ConfigParser
from urllib import urlencode
import urllib2
from os import uname
from ctypes import *
from ctypes.util import find_library


# Regexp for the returned "uid" used by the SRUN server.
UIDRE = re.compile(r"[0-9]+")  # FIXME: this is only a guess.

# Server error message table. This, too, is just guesses.
ERRMSG = {"username_error": "invalid username",
        "password_error": "invalid password",
        "ip_exist_error": "already authenticated",
        "online_num_error": "maximal number of online users exceeded",
        "version_error": "request rejected by server",
        "status_error": "payment required",
        "sync_error": "server sync not complete, try later",
        # logout_error seems to only occur when you do a kick with
        # a wrong password
        "logout_error": "cannot force logout.  Check login credentials?",
        "uid_error": "session ID mismatch"}  # uid_error could occur on logout

# NOTE: Calling find_library to locate the dynamc C library will create
# external processes.  I think I'm better just do it once.
LIBC_NAME = find_library("c")           # E.g. "libc.so.6"
LIBC = CDLL(LIBC_NAME)

PLATFORM = uname()[0].lower()


# Implementation of getifaddrs()-based MAC functions.
# Ref1: http://kbyanc.blogspot.com/2010/11/python-enumerating-ip-addresses-on.html
# Ref2: http://carnivore.it/2010/07/22/python_-_getifaddrs

# Linux: the broadcast and destination address pointers form a union (since
# the peer cannot be dst and brd at the same time).  On BSD the struct ifaddrs
# has two members for broadcast and destination separately.
class _linux_ifa_ifu_u(Union):
    _fields_ = [
            ("ifu_broadaddr", c_void_p),
            ("ifu_dstaddr", c_void_p)]


# sockaddr-related structures
# For generic/unknown address family
class _bsd_sockaddr(Structure):
    _fields_ = [
            ("sa_len", c_uint8),
            ("sa_family", c_uint8),
            ("sa_data", (c_uint8 * 14))]


class _linux_sockaddr(Structure):
    _fields_ = [
            ("sa_family", c_uint16),
            ("sa_data", (c_uint8 * 14))]


# AF_PACKET / Linux
# Linux header: linux/if_packet.h, struct sockaddr_ll
class _linux_sockaddr_ll(Structure):
    _fields_ = [
            ("sll_family", c_ushort),
            ("sll_protocol", c_uint16),
            ("sll_ifindex", c_int),
            ("sll_hatype", c_short),
            ("sll_pkttype", c_uint8),
            ("sll_halen", c_uint8),
            ("sll_addr", (c_uint8 * 8))]

    def __str__(self):
        return ":".join(["%02x" % self.sll_addr[i]
            for i in range(self.sll_halen)])


# AF_LINK -- BSD family, struct sockaddr_dl
# BSD: net/if_dl.h
# Pretty-printer mixin for both long- and short-data variants.
class _bsd_sockaddr_dl_formatter_mixin(object):
    """Mixin class that added pretty-printing function to
    the Python classes that interface the various BSD sockaddr_dl
    structures.

    """
    def __str__(self):
        addrdata = self.sdl_data[self.sdl_nlen: self.sdl_nlen
                + self.sdl_alen]
        return ":".join(["%02x" % x for x in addrdata])


# The "short data" is used by NetBSD / OpenBSD.  The difference is subtle,
# as the 12-char data is defined as *minimum* requirement.
class _bsd_short_sockaddr_dl(Structure, _bsd_sockaddr_dl_formatter_mixin):
    _fields_ = [
            ("sdl_len", c_uint8),
            ("sdl_family", c_uint8),
            ("sdl_index", c_ushort),
            ("sdl_type", c_uint8),
            ("sdl_nlen", c_uint8),
            ("sdl_alen", c_uint8),
            ("sdl_slen", c_uint8),
            ("sdl_data", (c_uint8 * 12))]


# The "long data" version is used by FreeBSD / DragonFlyBSD.
class _bsd_long_sockaddr_dl(Structure, _bsd_sockaddr_dl_formatter_mixin):
    _fields_ = [
            ("sdl_len", c_uint8),
            ("sdl_family", c_uint8),
            ("sdl_index", c_ushort),
            ("sdl_type", c_uint8),
            ("sdl_nlen", c_uint8),
            ("sdl_alen", c_uint8),
            ("sdl_slen", c_uint8),
            ("sdl_data", (c_uint8 * 46))]


# struct ifaddrs, see getifaddrs(3) man page.
# Linux: pointers to brd and dst form a union, takes one member in
# struct ifaddrs.
class _linux_ifaddrs(Structure):
    _fields_ = [
            ("ifa_next", c_void_p),
            ("ifa_name", c_char_p),
            ("ifa_flags", c_uint),
            ("ifa_addr", c_void_p),
            ("ifa_netmask", c_void_p),
            ("ifa_ifu", _linux_ifa_ifu_u),
            ("ifa_data", c_void_p)]


# BSD: pointers to brd and dst are two members.
class _bsd_ifaddrs(Structure):
    _fields_ = [
            ("ifa_next", c_void_p),
            ("ifa_name", c_char_p),
            ("ifa_flags", c_uint),
            ("ifa_addr", c_void_p),
            ("ifa_netmask", c_void_p),
            ("ifa_broadaddr", c_void_p),
            ("ifa_dstaddr", c_void_p),
            ("ifa_data", c_void_p)]


# Platform-specific initialization
if PLATFORM == "linux":
    from socket import AF_PACKET as AF_LINK
else:
    # According to FreeBSD doc, this is AF_LINK.  See sys/socket.h
    # Currently, this is true for all BSDs we consider.
    # http://www.freebsd.org/doc/en/books/developers-handbook/sockets-essential-functions.html
    AF_LINK = 18


# The values are tuples organized in the following manner:
# Index 0: The equivalent of struct ifaddrs, see ifaddrs.h, getifaddrs(3).
# Index 1: The equivalent of struct sockaddr_ll (Linux, see netpacket/packet.h)
#          or sockaddr_dl (BSD, see net/if_dl.h).
# Index 2: The equivalent of struct sockaddr, see sys/socket.h.
PLATFORM_LOOKUP = {"linux": (_linux_ifaddrs,
    _linux_sockaddr_ll, _linux_sockaddr),
    "freebsd": (_bsd_ifaddrs, _bsd_long_sockaddr_dl, _bsd_sockaddr),
    "dragonfly": (_bsd_ifaddrs, _bsd_long_sockaddr_dl, _bsd_sockaddr),
    "netbsd": (_bsd_ifaddrs, _bsd_short_sockaddr_dl, _bsd_sockaddr),
    "openbsd": (_bsd_ifaddrs, _bsd_short_sockaddr_dl, _bsd_sockaddr)}


def getmacaddrs():
    """Returns a dictionary with each key being an interface name and
    the value being a list of corresponding MAC addresses (possibly empty), in
    textual representation.

    This function calls the platform's getifaddrs() implementation.

    """
    # Unpack just for the sake of being meaningful.
    ifaddrs, sockaddr_dl, sockaddr = PLATFORM_LOOKUP[PLATFORM]
    ptr = c_void_p(None)
    result = LIBC.getifaddrs(pointer(ptr))
    if result != 0:
        return {}
    ifa = ifaddrs.from_address(ptr.value)
    result = {}

    while True:
        name = ifa.ifa_name
        if name not in result:
            result[name] = []

        # Some interface (such as a TUN virtual network) doesn't give us
        # ifa_addr at all and we can usually skip them because they're hardly
        # relevant for our usage case.
        if ifa.ifa_addr:
            sa = sockaddr.from_address(ifa.ifa_addr)
            if sa.sa_family == AF_LINK:
                si = sockaddr_dl.from_address(ifa.ifa_addr)
                addr = "%s" % si
                if addr:
                    result[name].append(addr)

        if ifa.ifa_next:
            ifa = ifaddrs.from_address(ifa.ifa_next)
        else:
            break

    LIBC.freeifaddrs(ptr)

    return result


def get_hwaddress(ifname):
    """Returns a text representation of the HW address of an interface."""
    # It might be possible that more than one link-layer address is associated
    # with the interface.  If this is the case, we simply return the first.
    # If there's no such interface or the interface has no MAC address,
    # we raise an RuntimeError
    macdict = getmacaddrs()
    try:
        addr = macdict[ifname][0]
    except (IndexError, KeyError):
        handle_exception("Error: interface %s: can't find address information" \
                % ifname)
    return addr


def tamper_hwaddress(hwaddress):
    # For whatever reason, we want to tamper the HW address.
    # This may just be a bug of the SRUN client, but we decide to maintain
    # maximal conformance, bug-to-bug.
    return "ff:ff:%s" % hwaddress[6:]


def read_uid(uid_path):
    """Search in the uid_path file for the uid used to end a session.  Stop and
    return on first match."""

    fh = open(uid_path, "r")
    for line in fh:
        bline = line.strip()
        if UIDRE.match(bline):
            return bline
    raise RuntimeError("No UID found in UID file: %s" % uid_path)


def write_uid(uid, uid_path):
    fh = open(uid_path, "w")
    fh.truncate(0)
    fh.write("%s\n" % uid)
    fh.close()
    return None


def communicate_to_server(url, postdata):
    """Communicate to the authentication/app gateway server by HTTP messages,
    with data sent using the POST method.

    Returns the document returned from server, unchanged.  It is up to the
    caller to decide what to do with the document.

    May exit on network failure.

    """
    try:
        f = urllib2.urlopen(url, postdata)
    except urllib2.URLError as e:
        handle_exception("Error: can't communicate to server."
                "The reason is: %s" % e.reason)
    msg = f.read()
    f.close()
    return msg


def login(config):
    """The login sequence."""

    # Gather login data
    uname = config.get("Account", "username")
    passwd = config.get("Account", "password")
    ifname = config.get("Client", "interface")
    address = config.get("Server", "address")
    port = config.get("Server", "port")
    fname = os.path.expanduser(config.get("Session", "uidfile"))
    url = "http://%s:%s/cgi-bin/do_login" % (address, port)

    login_data = {"username": uname,
        "password": passwd,
        "drop": "0",
        "type": "3",
        "n": "99",
        "mac": tamper_hwaddress(get_hwaddress(ifname))}
    login_postdata = urlencode(login_data)

    # Send data and receive response.
    # Expect either uid or server exception message.
    msg = communicate_to_server(url, login_postdata)

    # Analyse return message.
    txt, part, tail = msg.partition("`")
    if not part:            # Message doesn't contain the sep character "`"
        raise RuntimeError("Server return message not understood: %s" % msg)

    if UIDRE.match(txt):    # We got the uid
        write_uid(txt, fname)
    else:                   # Should be exception message
        handle_server_exception("Login: server indicates error", txt)
        # And leave the uid file alone, if exist

    return None


def logout(config):
    """The logout sequence."""

    fname = os.path.expanduser(config.get("Session", "uidfile"))
    uid = read_uid(fname)

    address = config.get("Server", "address")
    port = config.get("Server", "port")
    url = "http://%s:%s/cgi-bin/do_logout" % (address, port)

    logout_data = {"uid": uid}
    logout_postdata = urlencode(logout_data)

    msg = communicate_to_server(url, logout_postdata)
    s = msg.strip()
    if s != "logout_ok":    # NOTE: Magic constant used.
        handle_server_exception("Logout: server indicates error", s)
    return None


def kick(config):
    """Kick all users using the account."""

    uname = config.get("Account", "username")
    passwd = config.get("Account", "password")
    address = config.get("Server", "address")
    port = config.get("Server", "port")
    url = "http://%s:%s/cgi-bin/force_logout" % (address, port)

    kick_data = {"username": uname, "password": passwd}
    kick_postdata = urllib.urlencode(kick_data)

    msg = communicate_to_server(url, kick_postdata)
    s = msg.strip()
    if s != "logout_ok":    # NOTE: Magic constant used.
        handle_server_exception("Kick: server indicates error", s)
    return None


def handle_server_exception(prefix, txt):
    """Handle the error message returned by the server.

    If the error is understood, print the corresponding human-readable
    error message with prefix prefixed to standard error.  If the error
    message is not understood, raise RuntimeError with the message echoed.

    In either case, the program fails and exits.

    """
    if txt in ERRMSG:
        # We don't raise RuntimeError, because this is something the program
        # understands.
        handle_exception("%s: %s" % (prefix, ERRMSG[txt]))
    else:
        raise RuntimeError("Unhandled login error: %s" % ERRMSG[txt])


def handle_exception(txt):
    """Generic exception handler."""

    # Doesn't actually handle, just report and crash.
    print >> sys.stderr, "%s" % txt
    sys.exit(1)


def show_usage_and_fail():
    print >> sys.stderr, "Usage: pysrun {login|logout|kick}"
    exit(2)


if __name__ == "__main__":
    try:
        op = sys.argv[1]
    except IndexError:
        show_usage_and_fail()

    #FIXME: this shouldn't be hard-coded.
    config_path = os.path.expanduser("~/.pysrun.cfg")
    config = ConfigParser.RawConfigParser()
    config.read(config_path)

    if op == "login":
        login(config)
    elif op == "logout":
        logout(config)
    elif op == "kick":
        kick(config)
    else:
        show_usage_and_fail()
